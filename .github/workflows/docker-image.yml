name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Matrix:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.set-matrix.outputs.build }}
      built_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build Matrix all addons
      id: set-matrix
      run: |
        if [ $(git --no-pager diff HEAD HEAD~1 --name-only | grep -v -E '^\.' | cut -d'/' -f1 | uniq) ]; then
          echo "build=yes" >> $GITHUB_OUTPUT
        else
          echo "build=no" >> $GITHUB_OUTPUT
        fi
        output=$(git --no-pager diff HEAD HEAD~1 --name-only | grep -v -E '^\.' | cut -d'/' -f1 | uniq | xargs echo -n | jq -Rsc 'split(" ") | { "addons": (.) }')
        echo "matrix=${output}" >> $GITHUB_OUTPUT

  Build:
    runs-on: ubuntu-latest
    needs: Matrix
    if: needs.Matrix.outputs.build == 'yes'
    strategy:
      fail-fast: false
      matrix:
        ${{ insert }}: ${{ fromJson(needs.Matrix.outputs.built_matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_DEPLOY_KEY }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Perquisites
      run: |
        sudo snap install yq
        curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
        inspec --chef-license=accept

    - name: Build
      env:
        DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
        ADDON: ${{ matrix.addons }}
        BUILD_NR: ${{ github.run_number }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
      working-directory: ./${{ matrix.addons }}
      run: |
        VERSION=$(yq -r .version config.yaml)
        declare -a PLATFORMS=("linux/amd64" "linux/arm64" "linux/386" "linux/arm/v7" "linux/arm/v6")
        for PLATFORM in "${PLATFORMS[@]}"; do
          ARCH=$(echo "${PLATFORM}" | awk -F  "/" '{print $2$3}')
          echo ""
          echo "============================================================="
          echo "Building: ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
          echo "============================================================="
          echo ""
          docker buildx build \
            --tag "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}" \
            --platform ${PLATFORM} \
            --build-arg "VERSION=${VERSION}" \
            --load \
            -f Dockerfile .
        done

    - name: Test
      env:
        DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
        ADDON: ${{ matrix.addons }}
        BUILD_NR: ${{ github.run_number }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
      working-directory: ./${{ matrix.addons }}
      run: |
        VERSION=$(yq -r .version config.yaml)
        declare -a PLATFORMS=("linux/amd64" "linux/arm64" "linux/386" "linux/arm/v7" "linux/arm/v6")
        for PLATFORM in "${PLATFORMS[@]}"; do
          ARCH=$(echo "${PLATFORM}" | awk -F  "/" '{print $2$3}')
          echo ""
          echo "============================================================="
          echo "Setup Tests for: ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
          echo "============================================================="
          echo ""
          docker run -d -e NO_SUPERVISOR=True --platform ${PLATFORM} --rm --name ${ADDON} -v $(pwd)/test/resources/options.json:/data/options.json "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
          docker exec -u 0 ${ADDON} apt-get update
          docker exec -u 0 ${ADDON} apt-get install net-tools procps -y

          echo ""
          echo "============================================================="
          echo "Testing: ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
          echo "============================================================="
          echo ""
          inspec exec ./test/integration -t docker://${ADDON}
          echo "Teardown"
          docker container stop ${ADDON}

          if [[ "${GITHUB_EVENT_NAME}" == 'push' ]]; then
            echo ""
            echo "============================================================="
            echo "Pushing: ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
            echo "============================================================="
            echo ""
            docker tag "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}" "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}"
            docker push "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}"
            docker push "${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}"
          else
            echo ""
            echo "Event: ${GITHUB_EVENT_NAME} != push"
            echo "Omitting push to DockerHub"
          fi
        done

    - name: Create and push shared manifest
      if: github.event_name == 'push'
      env:
        DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
        ADDON: ${{ matrix.addons }}
        BUILD_NR: ${{ github.run_number }}
      working-directory: ./${{ matrix.addons }}
      run: |
        VERSION=$(yq -r .version config.yaml)
        declare -a PLATFORMS=("linux/amd64" "linux/arm64" "linux/386" "linux/arm/v7" "linux/arm/v6")

        echo "#!/bin/bash" > push-shared-tags.sh
        echo -n "docker manifest create ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}" >> push-shared-tags.sh
        for PLATFORM in "${PLATFORMS[@]}"; do
          ARCH=$(echo "${PLATFORM}" | awk -F  "/" '{print $2$3}')
          echo -n " ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}-${ARCH}-${BUILD_NR}" >> push-shared-tags.sh
        done
        echo "" >> push-shared-tags.sh
        echo "docker manifest push ${DOCKER_USER}/hass-addon-${ADDON}:${VERSION}" >> push-shared-tags.sh
        echo "exit 0" >> push-shared-tags.sh
        cat push-shared-tags.sh
        chmod +x ./push-shared-tags.sh
        ./push-shared-tags.sh
        rm -rf ./push-shared-tags.sh

  Check-Build:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - run: |
          result="${{ needs.Build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
